# First symbol used is start symbol
# Format is a->b ... For epsilon, simply have empty string be b
prgm -> program id ( id ) ; decs comp_stmt . 
prgm -> program id ( id ) ; decs subprgm_decs comp_stmt . 
prgm -> program id ( id ) ; subprgm_decs comp_stmt . 
prgm -> program id ( id ) ; comp_stmt . 
decs -> var id : type ; 
decs -> decs var id : type ; 
type -> std_type 
type -> array [ num .. num ] of std_type 
std_type -> integer 
std_type -> real 
subprgm_decs -> subprgm_decs subprgm_dec ; 
subprgm_decs -> subprgm_dec ; 
subprgm_dec -> subprgm_head comp_stmt 
subprgm_dec -> subprgm_head decs comp_stmt 
subprgm_dec -> subprgm_head decs subprgm_decs comp_stmt 
subprgm_dec -> subprgm_head subprgm_decs comp_stmt 
subprgm_head -> procedure id ; 
subprgm_head -> procedure id args ; 
args -> ( param_list ) 
param_list -> id : type 
param_list -> param_list ; id : type 
comp_stmt -> begin end 
comp_stmt -> begin opt_stmts end 
opt_stmts -> stmt_list 
stmt_list -> stmt 
stmt_list -> stmt_list ; stmt 
stmt -> if expr then stmt 
stmt -> comp_stmt 
stmt -> proc_stmt 
stmt -> if expr then stmt else stmt 
stmt -> variable assignop expr 
stmt -> while expr do stmt 
variable -> id [ expr ] 
variable -> id 
proc_stmt -> call id 
proc_stmt -> call id ( expr_list ) 
expr_list -> expr 
expr_list -> expr_list , expr 
expr -> simple_expr 
expr -> simple_expr relop simple_expr 
term -> factor 
term -> term mulop factor 
simple_expr -> term 
simple_expr -> simple_expr addop term 
simple_expr -> sign term 
factor -> id [ expr ] 
factor -> ( expr ) 
factor -> id 
factor -> num 
factor -> not factor 
sign -> - 
sign -> + 
addop -> - 
addop -> + 
addop -> or 
assignop -> := 
mulop -> and 
mulop -> / 
mulop -> div 
mulop -> * 
mulop -> mod 
relop -> <= 
relop -> >= 
relop -> = 
relop -> <> 
relop -> < 
relop -> > 
