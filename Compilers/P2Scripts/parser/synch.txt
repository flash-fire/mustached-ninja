addop
( id num not $
args
; $
assignop
+ ( $ - id num not
comp_stmt
; end . else $
comp_stmtLF1
; end . else $
decs
begin procedure $
decsLR1
begin procedure $
expr
do , then $ ] ) ; end else
exprLF1
do , then $ ] ) ; end else
expr_list
) $
expr_listLR1
) $
factor
< do then <> - <= mod ] + or = * end / >= , div $ and ) ; else >
factorLF1
< do then <> - <= mod ] + or = * end / >= , div $ and ) ; else >
mulop
( id num not $
opt_stmts
end $
param_list
) $
param_listLR1
) $
prgm
$
prgmLF1
$
prgmLF1LF1
$
proc_stmt
; end else $
proc_stmtLF1
; end else $
relop
+ ( $ - id num not
sign
( id num not $
simple_expr
< do then , $ <> <= ] ) = ; end >= else >
simple_exprLR1
< do then , $ <> <= ] ) = ; end >= else >
std_type
; ) $
stmt
; end else $
stmtLF1
; end else $
stmt_list
end $
stmt_listLR1
end $
subprgm_dec
; $
subprgm_decLF1
; $
subprgm_decLF1LF1
; $
subprgm_decs
begin $
subprgm_decsLR1
begin $
subprgm_head
begin var procedure $
subprgm_headLF1
begin var procedure $
term
< do then <> - <= ] + or = end >= , $ ) ; else >
termLR1
< do then <> - <= ] + or = end >= , $ ) ; else >
type
; ) $
variable
:= $
variableLF1
:= $