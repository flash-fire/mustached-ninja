addop
	( num not id
args
	;
assignop
	num - not id + (
comp_stmt
	. ; else end
comp_stmtLF1
	. ; else end
decs
	begin procedure
decsLR1
	begin procedure
expr
	; end ) else , do ] then
exprLF1
	; end ) else , do ] then
expr_list
	)
expr_listLR1
	)
factor
	end - ) and > <> + , or ] = then ; / mod * else < <= do div >=
factorLF1
	end - ) and > <> + , or ] = then ; / mod * else < <= do div >=
idList
	)
idListLR1
	)
mulop
	( num not id
opt_stmts
	end
param_list
	)
param_listLR1
	)
prgm
	$
prgmLF1
	$
prgmLF1LF1
	$
proc_stmt
	; else end
proc_stmtLF1
	; else end
relop
	num - not id + (
sign
	( num not id
simple_expr
	end ) > <> , ] = then ; else < <= do >=
simple_exprLR1
	; end ) > <> else < , <= do ] = >= then
std_type
	; )
stmt
	; else end
stmtLF1
	; end
stmt_list
	end
stmt_listLR1
	end
subprgm_dec
	;
subprgm_decLF1
	;
subprgm_decLF1LF1
	;
subprgm_decs
	begin
subprgm_decsLR1
	begin
subprgm_head
	begin var procedure
subprgm_headLF1
	begin var procedure
term
	end - ) > <> + , or ] = then ; else < <= do >=
termLR1
	end - ) > <> + , or ] = then ; else < <= do >=
type
	; )
variable
	:=
variableLF1
	:=
