addop
( not num id $
args
$ ;
assignop
$ - id + ( not num
comp_stmt
else . $ end ;
comp_stmtLF1
else . $ end ;
decs
$ begin procedure
decsLR1
$ begin procedure
expr
$ else , then ; ] ) do end
exprLF1
$ else , then ; ] ) do end
expr_list
$ )
expr_listLR1
$ )
factor
/ $ and else >= , * ; = > < <> <= do end - mod + then div or ] )
factorLF1
/ $ and else >= , * ; = > < <> <= do end - mod + then div or ] )
idList
$ )
idListLR1
$ )
mulop
( not num id $
opt_stmts
$ end
param_list
$ )
param_listLR1
$ )
prgm
$
prgmLF1
$
prgmLF1LF1
$
proc_stmt
else $ end ;
proc_stmtLF1
else $ end ;
relop
$ - id + ( not num
sign
( not num id $
simple_expr
$ else >= , then ; = ] > < <> ) <= do end
simple_exprLR1
$ else >= , then ; = ] > < <> ) <= do end
std_type
$ ) ;
stmt
else $ end ;
stmtLF1
$ end ;
stmt_list
$ end
stmt_listLR1
$ end
subprgm_dec
$ ;
subprgm_decLF1
$ ;
subprgm_decLF1LF1
$ ;
subprgm_decs
$ begin
subprgm_decsLR1
$ begin
subprgm_head
var $ begin procedure
subprgm_headLF1
var $ begin procedure
term
$ else >= , ; = > < <> <= do end - + then or ] )
termLR1
$ else >= , ; = > < <> <= do end - + then or ] )
type
$ ) ;
variable
:= $
variableLF1
:= $
