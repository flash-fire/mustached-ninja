addop
( $ id num not
args
$ ;
assignop
+ $ - ( id num not
comp_stmt
else end $ ; .
comp_stmtLF1
. end $ else ;
decs
$ begin procedure
decsLR1
$ begin procedure
expr
end $ do ] ) , then ; else
exprLF1
end $ do ] ) , then ; else
expr_list
$ )
expr_listLR1
$ )
factor
$ and do - ] ; = < * <= div + or end >= ) / , then mod else <> >
factorLF1
$ and do - ] ; = < * <= div + or end >= ) / , then mod else <> >
idList
$ )
idListLR1
$ )
mulop
( $ id num not
opt_stmts
end $
param_list
$ )
param_listLR1
$ )
prgm
$
prgmLF1
$
prgmLF1LF1
$
proc_stmt
end $ ; else
proc_stmtLF1
end $ ; else
relop
+ $ - ( id num not
sign
( $ id num not
simple_expr
end $ do >= ] ) , then ; = < else <> > <=
simple_exprLR1
end $ do >= ] ) , then ; = < else <> > <=
std_type
$ ) ;
stmt
end $ ; else
stmtLF1
end $ ;
stmt_list
end $
stmt_listLR1
end $
subprgm_dec
$ ;
subprgm_decLF1
$ ;
subprgm_decLF1LF1
$ ;
subprgm_decs
$ begin
subprgm_decsLR1
$ begin
subprgm_head
$ begin var procedure
subprgm_headLF1
$ begin var procedure
term
$ do - ] ; = < <= + or end >= ) , then else <> >
termLR1
$ do - ] ; = < <= + or end >= ) , then else <> >
type
$ ) ;
variable
:= $
variableLF1
:= $
