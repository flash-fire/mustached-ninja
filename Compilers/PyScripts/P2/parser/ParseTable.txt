Terminal Order['(', ')', '*', '+', ',', '-', '.', '..', '/', ':', ':=', ';', '<', '<=', '<>', '=', '>', '>=', '[', ']', 'and', 'array', 'begin', 'call', 'div', 'do', 'else', 'end', 'id', 'if', 'integer', 'mod', 'not', 'num', 'of', 'or', 'procedure', 'program', 'real', 'then', 'var', 'while']
prgm
	program -> p r o g r a m 
prgmLF1
	begin -> c o m p _ s t m t 
	procedure -> s u b p r g m _ d e c s 
	var -> d e c s 
prgmLF1LF1
	begin -> c o m p _ s t m t 
	procedure -> s u b p r g m _ d e c s 
idList
	id -> i d 
idListLR1
	, -> , 
decs
	var -> v a r 
decsLR1
	var -> v a r 
type
	array -> a r r a y 
	integer -> s t d _ t y p e 
	real -> s t d _ t y p e 
std_type
	integer -> i n t e g e r 
	real -> r e a l 
subprgm_decs
	procedure -> s u b p r g m _ d e c 
subprgm_decsLR1
	procedure -> s u b p r g m _ d e c 
subprgm_dec
	procedure -> s u b p r g m _ h e a d 
subprgm_decLF1
	begin -> c o m p _ s t m t 
	procedure -> s u b p r g m _ d e c s 
	var -> d e c s 
subprgm_decLF1LF1
	begin -> c o m p _ s t m t 
	procedure -> s u b p r g m _ d e c s 
subprgm_head
	procedure -> p r o c e d u r e 
subprgm_headLF1
	( -> a r g s 
	; -> ; 
args
	( -> ( 
param_list
	id -> i d 
param_listLR1
	; -> ; 
comp_stmt
	begin -> b e g i n 
comp_stmtLF1
	begin -> o p t _ s t m t s 
	call -> o p t _ s t m t s 
	end -> e n d 
	id -> o p t _ s t m t s 
	if -> o p t _ s t m t s 
	while -> o p t _ s t m t s 
opt_stmts
	begin -> s t m t _ l i s t 
	call -> s t m t _ l i s t 
	id -> s t m t _ l i s t 
	if -> s t m t _ l i s t 
	while -> s t m t _ l i s t 
stmt_list
	begin -> s t m t 
	call -> s t m t 
	id -> s t m t 
	if -> s t m t 
	while -> s t m t 
stmt_listLR1
	; -> ; 
stmt
	begin -> c o m p _ s t m t 
	call -> p r o c _ s t m t 
	id -> v a r i a b l e 
	if -> i f 
	while -> w h i l e 
stmtLF1
	else -> e l s e 
variable
	id -> i d 
variableLF1
	[ -> [ 
proc_stmt
	call -> c a l l 
proc_stmtLF1
	( -> ( 
expr_list
	( -> e x p r 
	+ -> e x p r 
	- -> e x p r 
	id -> e x p r 
	not -> e x p r 
	num -> e x p r 
expr_listLR1
	, -> , 
expr
	( -> s i m p l e _ e x p r 
	+ -> s i m p l e _ e x p r 
	- -> s i m p l e _ e x p r 
	id -> s i m p l e _ e x p r 
	not -> s i m p l e _ e x p r 
	num -> s i m p l e _ e x p r 
exprLF1
	< -> r e l o p 
	<= -> r e l o p 
	<> -> r e l o p 
	= -> r e l o p 
	> -> r e l o p 
	>= -> r e l o p 
term
	( -> f a c t o r 
	id -> f a c t o r 
	not -> f a c t o r 
	num -> f a c t o r 
termLR1
	* -> m u l o p 
	/ -> m u l o p 
	and -> m u l o p 
	div -> m u l o p 
	mod -> m u l o p 
simple_expr
	( -> t e r m 
	+ -> s i g n 
	- -> s i g n 
	id -> t e r m 
	not -> t e r m 
	num -> t e r m 
simple_exprLR1
	+ -> a d d o p 
	- -> a d d o p 
	or -> a d d o p 
factor
	( -> ( 
	id -> i d 
	not -> n o t 
	num -> n u m 
factorLF1
	[ -> [ 
sign
	+ -> + 
	- -> - 
addop
	+ -> + 
	- -> - 
	or -> o r 
assignop
	:= -> : = 
mulop
	* -> * 
	/ -> / 
	and -> a n d 
	div -> d i v 
	mod -> m o d 
relop
	< -> < 
	<= -> < = 
	<> -> < > 
	= -> = 
	> -> > 
	>= -> > = 
