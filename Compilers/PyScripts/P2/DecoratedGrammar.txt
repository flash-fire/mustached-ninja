prgm_1:
	<<vars>> totalSize
	<<begin>> program_1 id_1 (_1 idList_1 )_1 ;_1 prgmLF1_1 <<end>> 
		id_1
			currScope = new Scope(NULL, prgm_1->findT("id_1")->lex, lookAhead.line);
			std::cout << prgm_1->findT("id_1")->lex;
		<<end>>
			prgm_1->set("totalSize", prgmLF1_1->get("totalSize"));
prgmLF1_1:
	<<vars>> totalSize
	<<begin>> comp_stmt_1 ._1 <<end>> 
	<<begin>> subprgm_decs_1 comp_stmt_1 ._1 <<end>> 
	<<begin>> decs_1 prgmLF1LF1_1 <<end>> 
		<<begin>>
			decs_1->set("offset", 0);
		<<end>>
			prgmLF1_1->set("totalSize", decs_1->get("totalSize"));
		<<error>>
			prgmLF1_1->set("totalSize", 0);
prgmLF1LF1_1:
	<<begin>> comp_stmt_1 ._1 <<end>> 
	<<begin>> subprgm_decs_1 comp_stmt_1 ._1 <<end>> 
idList_1:
	<<begin>> id_1 idListLR1_1 <<end>> 
idListLR1_1:
	<<begin>> EPSILON <<end>> 
	<<begin>> ,_1 id_1 idListLR1_2 <<end>> 
decs_1:
	<<vars>> totalSize offset t
	<<begin>> var_1 id_1 :_1 type_1 ;_1 decsLR1_1 <<end>>
		type_1
			decsLR1_1->set("offset", decs_1->get("offset") + type_1->get("width")); //# debug later
			Token* idTok = decs_1->findT("id_1");
			std::string ret = "";
			std::string* err = &ret;
			if (currScope->addVar(idTok->lex, ITT(type_1->get("t")), decs_1->get("offset"), err) == false)
			{
				target << *err << " VAR NAME: " << idTok->lex << " LINE # " << idTok->line << "\n";
			}
		<<end>>
			decs_1->set("t", decsLR1_1->get("t"));
			decs_1->set("totalSize", decsLR1_1->get("totalSize"));
	<<error>>
		decs_1->set("t", TTI(ERROR));
		decs_1->set("totalSize", 0);
decsLR1_1:
	<<vars>> totalSize offset t
	<<begin>> EPSILON <<end>> 
		<<end>>
			decsLR1_1->set("totalSize", decsLR1_1->get("offset"));
			decsLR1_1->set("t", TTI(NONE));
	<<begin>> var_1 id_1 :_1 type_1 ;_1 decsLR1_2 <<end>> 
		type_1
			decsLR1_2->set("offset", decsLR1_1->get("offset") + type_1->get("width")); //# ADDRESS
			Token* idTok = decsLR1_1->findT(1); //# SCOPE
			std::string ret = "";
			std::string* err = &ret;
			if (currScope->addVar(idTok->lex, ITT(type_1->get("t")), decsLR1_1->get("offset"), err) == false)
			{
				target << *err << " VAR NAME: " << idTok->lex << " LINE # " << idTok->line << "\n";
			}
		<<end>>
			decsLR1_1->set("t", decsLR1_2->get("t"));
			decsLR1_1->set("totalSize", decsLR1_2->get("totalSize"));
	<<error>>
		decsLR1_1->set("t", TTI(ERROR));
		decsLR1_1->set("totalSize", 0);
type_1:
	<<vars>> t width
	<<begin>> std_type_1 <<end>>
		<<end>>
			type_1->set("t", std_type_1->get("t"));
			type_1->set("width", std_type_1->get("width"));
	<<begin>> array_1 [_1 num_1 .._1 num_2 ]_1 of_1 std_type_1 <<end>>
		<<end>>
			Token* tok1 = type_1->findT("num_1"); //# Yes this may seem unsafe, but I only have to do this for arrays so I'm okay with it.
			Token* tok2 = type_1->findT("num_2");
			type_1->set("t",TTI(ERROR)); //# Defaulting to error unless changed
			type_1->set("width", 0);
			
			int min = -1;
			int max = -1;
			int arraySize = 0;
			int i = 0; //# Terrible hack is great hack!
			for (Token* currTok : {tok1, tok2})
			{
				if (currTok->isInt())
				{
					if (i == 0)
						min = currTok->val();
					else if (i == 1)
						max = currTok->val();
					else
						std::cout << "WTF in array terrible hack";
				}
				else if (currTok->isReal())
				{
					TypeErrorTok(nt, Type::INT, Type::REAL, *currTok);
				}
				else
				{ //# I highly doubt this line will be reached because currTok must be valid syntactically for this to be reached.
				  //# Therefore, I added this just in case I get it. IT's a nice "MY COMPILER HAS A BUG" output.
				TypeErrorTok(nt, Type::INT, Type::UNASSIGNED, *currTok);
				}
				i++;
			}
			arraySize = max - min;
			if (max == -1 || min == -1)
			{ // error would be already reported at above
			
			}
			else if (arraySize <= 0) //# if bad args
			{
				target << "SEMERR: Array parameters improper. Min >= Max with " << tok1->lex << " and " << tok2->lex << " on line " << lookAhead.line << "\n";
			}
			else 
			{
				int t_ = std_type_1->get("t");
				if (t_ == TTI(INT))
				{
					type_1->set("t", TTI(AINT));
					type_1->set("width", std_type_1->get("width") * arraySize);
				}
				if (t_ == TTI(REAL))
				{
					type_1->set("t", TTI(AREAL));
					type_1->set("width", std_type_1->get("width") * arraySize);
				}
				 //# FINALLY all the silly errors are done
			}
			std::cout << "\nMade array of type " << Type::typeToString(ITT(type_1->get("t"))) << " width " << type_1->get("width");

	<<error>> //# no need to say that the array has an error when you have a syntax error. You got problems. You already know.
		type_1->set("t", TTI(ERROR));
		type_1->set("width", 0);
std_type_1:
	<<vars>> t width
	<<begin>> real_1 <<end>> 
		<<end>>
			std_type_1->set("width", 8);
			std_type_1->set("t", TTI(REAL));
	<<begin>> integer_1 <<end>>
		<<end>>
			std_type_1->set("width", 4);
			std_type_1->set("t", TTI(INT));
	<<error>>
		std_type_1->set("t", TTI(ERROR));
		std_type_1->set("width", 0);
subprgm_decs_1:
	<<begin>> subprgm_dec_1 ;_1 subprgm_decsLR1_1 <<end>> 
		<<begin>>
			Scope* dummyScope = new Scope(currScope, "~~DUMMY~~", -1); //# Dummy scope that makes algorithms easier.
			scopeDepth++;
			std::string* err = &std::string();
			currScope->addChild(dummyScope, err); //# This call will never error. Thank god.
			if (*err != "")
			{
				std::cout  << " ANGRY ANGRY ANGRY IMPOSSIBLE ASSERTION LIKE THING ENCOUNTERED. DUMMY SCOPE! DUMMYSCOPE! FEEL ANGER YOU SHUOLD! YOU ANGRISH!\n";
			}
			currScope = dummyScope;
subprgm_decsLR1_1:
	<<begin>> EPSILON <<end>>
		<<end>>
			currScope = currScope->getParent(); //# SCOPE
	<<begin>> subprgm_dec_1 ;_1 subprgm_decsLR1_2 <<end>> 
subprgm_dec_1:
	<<vars>> first
	<<begin>> subprgm_head_1 subprgm_decLF1_1 <<end>>
		subprgm_head_1
			subprgm_decLF1_1->set("totalSize", subprgm_head_1->get("totalSize")); //# pass back address totalSize for params
subprgm_decLF1_1:
	<<vars>> totalSize
	<<begin>> decs_1 subprgm_decLF1LF1_1 <<end>> 
		<<begin>>
			decs_1->set("offset", subprgm_decLF1_1->get("totalSize")); //# receive address offset for params
	<<begin>> comp_stmt_1 <<end>> 
	<<begin>> subprgm_decs_1 comp_stmt_1 <<end>> 
subprgm_decLF1LF1_1:
	<<begin>> comp_stmt_1 <<end>> 
	<<begin>> subprgm_decs_1 comp_stmt_1 <<end>> 
subprgm_head_1:
	<<vars>> totalSize t
	<<begin>> procedure_1 id_1 subprgm_headLF1_1 <<end>> 
		id_1
			Token* tok = subprgm_head_1->findT("id_1");
			Scope* currSib = new Scope(currScope->getParent(), tok->lex, lookAhead.line);
			std::string* errMsg = &std::string();
			//#std::cout << std::string(scopeDepth * 2, ' ') << tok->lex << "\n" << "\n";
			currScope->addSibling(currSib, errMsg); // If it returns false, there isn't much we could do anyways.
			if (*errMsg != "")
			{
				target << *errMsg;
			}
			currScope = currSib;
		<<end>>
			subprgm_head_1->set("totalSize", subprgm_headLF1_1->get("totalSize")); //# pass back address address offset for params
			subprgm_head_1->set("t", subprgm_headLF1_1->get("t"));
		<<error>>
			subprgm_head_1->set("t", TTI(ERROR));
			subprgm_head_1->set("totalSize", 0);
subprgm_headLF1_1:
	<<vars>> totalSize t
	<<begin>> args_1 ;_1 <<end>> 
		<<end>>
			subprgm_headLF1_1->set("totalSize", args_1->get("totalSize"));
			subprgm_headLF1_1->set("t", args_1->get("t"));
	<<begin>> ;_1 <<end>> 
		<<end>>
			subprgm_headLF1_1->set("totalSize", 0);
			subprgm_headLF1_1->set("t", TTI(NONE));
	<<error>>
		subprgm_headLF1_1->set("t", TTI(ERROR));
		subprgm_headLF1_1->set("totalSize", 0);
args_1:
	<<vars>> totalSize offset t
	<<begin>> (_1 param_list_1 )_1 <<end>> 
		<<end>>
			args_1->set("totalSize", param_list_1->get("totalSize"));
			args_1->set("t", param_list_1->get("t"));
		<<error>>
			args_1->set("t", TTI(ERROR));
			args_1->set("totalSize", 0);
param_list_1:
	<<vars>> totalSize offset t
	<<begin>> id_1 :_1 type_1 param_listLR1_1 <<end>> 
		type_1
			param_listLR1_1->set("offset", param_list_1->get("offset") + type_1->get("width")); //# OFFSET STARTS AT 0 BECAUSE PARAMS
			Token* idTok = param_list_1->findT("id_1");
			std::string ret = "";
			std::string* err = &ret;
			if (currScope->addParam(idTok->lex, ITT(type_1->get("t")), param_list_1->get("offset"), err) == false)
			{
				target << *err << " VAR NAME: " << idTok->lex << " LINE # " << idTok->line << "\n";
			}
		<<end>>
			param_list_1->set("t", param_listLR1_1->get("t"));
			param_list_1->set("totalSize", param_listLR1_1->get("totalSize"));
param_listLR1_1:
	<<vars>> totalSize offset t
	<<begin>> EPSILON <<end>> 
		<<end>>
			param_listLR1_1->set("totalSize", param_listLR1_1->get("offset"));
			param_listLR1_1->set("t", TTI(NONE));
	<<begin>> ;_1 id_1 :_1 type_1 param_listLR1_2 <<end>> 
		type_1
			param_listLR1_2->set("offset", param_listLR1_1->get("offset") + type_1->get("width")); //# ADDRESS
			Token* idTok = param_listLR1_1->findT(1); //# SCOPE
			std::string ret = "";
			std::string* err = &ret;
			if (currScope->addParam(idTok->lex, ITT(type_1->get("t")), param_listLR1_1->get("offset"), err) == false)
			{
				target << *err << " VAR NAME: " << idTok->lex << " LINE # " << idTok->line << "\n";
			}
		<<end>>
			param_listLR1_1->set("t", param_listLR1_2->get("t"));
			param_listLR1_1->set("totalSize", param_listLR1_2->get("totalSize"));
	<<error>>
		param_listLR1_1->set("t", TTI(ERROR));
		param_listLR1_1->set("totalSize", 0);
comp_stmt_1:
	<<begin>> begin_1 comp_stmtLF1_1 <<end>> 
comp_stmtLF1_1:
	<<begin>> end_1 <<end>> 
	<<begin>> opt_stmts_1 end_1 <<end>> 
opt_stmts_1:
	<<begin>> stmt_list_1 <<end>> 
stmt_list_1:
	<<begin>> stmt_1 stmt_listLR1_1 <<end>> 
stmt_listLR1_1:
	<<begin>> EPSILON <<end>> 
	<<begin>> ;_1 stmt_1 stmt_listLR1_2 <<end>> 
stmt_1:
	<<begin>> variable_1 assignop_1 expr_1 <<end>>
		assignop_1
			expr_1->set("i", variable_1->get("t"));
	<<begin>> proc_stmt_1 <<end>> 
	<<begin>> comp_stmt_1 <<end>> 
	<<begin>> while_1 expr_1 do_1 stmt_2 <<end>> 
		<<begin>>
			expr_1->set("i", TTI(BOOL));
	<<begin>> if_1 expr_1 then_1 stmt_2 stmtLF1_1 <<end>> 
		<<begin>>
			expr_1->set("i", TTI(BOOL));
stmtLF1_1:
	<<begin>> else_1 stmt_1 <<end>> 
	<<begin>> EPSILON <<end>> 
variable_1:
	<<vars>> t
	<<begin>> id_1 variableLF1_1 <<end>>
		id_1
			Token* tok = variable_1->findT("id_1");
			std::string id = tok->lex;
			std::string* err = &std::string();
			Type::TYPE foundType = currScope->getTypeOfVar(id, err);
			variableLF1_1->set("i", foundType); // It will set the type to error if not found.
			if (*err != "")
			{
				target << "SEMERR : attempting to use uninitialized variable: " << id << " on line " << std::to_string(tok->line) << " char position " << std::to_string(tok->charNum) << "\n";
			}

		<<end>>
			variable_1->set("t", variableLF1_1->get("t"));
variableLF1_1:
	<<vars>> t i
	<<begin>> [_1 expr_1 ]_1 <<end>> 
		[_1
			expr_1->set("i", TTI(INT));
		<<end>>
			int t_i = variableLF1_1->get("i");
			if (false == (t_i == TTI(AINT) || t_i == TTI(AREAL) || t_i == TTI(ERROR)))
			{
				target << "TYPERR: Expecting array, but received " << Type::typeToString(ITT(t_i)) << " on line " << lookAhead.line << ".\n";
				variableLF1_1->set("t", TTI(ERROR));
			}
			else
			{	
				if (expr_1->get("t") == TTI(INT))
				{
					int t_exp = 0;
					if (t_i == TTI(AINT)) t_exp = TTI(INT);
					if (t_i == TTI(AREAL)) t_exp = TTI(REAL);
					variableLF1_1->set("t", t_exp);
				}
				else
				{
					variableLF1_1->set("t", TTI(ERROR));
				}
			}
	<<begin>> EPSILON <<end>> 
		<<end>>
			variableLF1_1->set("t", variableLF1_1->get("i"));
proc_stmt_1:
	<<begin>> call_1 id_1 proc_stmtLF1_1 <<end>> 
	id_1
		std::string* procName = &proc_stmt_1->findT("id_1")->lex;
		proc_stmtLF1_1->leSigh = procName; //# Making a one time use pointer in ParseNode just to make this decorating easier and safer.
		if (currScope->isProcCallable(*procName) == NULL)
		{ // Put this check here so that console won't get spammed for each parameter when not in scope.
			target << "SEMERR: Procedure " << *procName << " is not in scope on line " << lookAhead.line << "\n";
		}	
proc_stmtLF1_1:
	<<vars>> t
	<<begin>> EPSILON <<end>> 
		<<end>>
			std::string procID = *proc_stmtLF1_1->leSigh;
			Scope* calledScope = currScope->isProcCallable(procID);
			if (calledScope != NULL)
			{ // Called scope being out of scope (NULL) is handled in proc_stmt_1
				if (calledScope->getParams().size() == 0)
				{
					proc_stmtLF1_1->set("t", TTI(NONE));
				}
				else
				{
					target << "SEMERR: Expected " << std::to_string(calledScope->getParams().size()) << " parameters, but received none on line " << lookAhead.line << "\n";
					proc_stmtLF1_1->set("t", TTI(ERROR));
				}
			}
	<<begin>> (_1 expr_list_1 )_1 <<end>> 
		<<begin>>
			expr_list_1->leSigh = proc_stmtLF1_1->leSigh;
			expr_list_1->set("ind",0);
		<<end>>
			proc_stmtLF1_1->set("t", expr_list_1->get("t")); // set to exprList type
expr_list_1:
	<<vars>> ind t
	<<begin>> expr_1 expr_listLR1_1 <<end>> 
		<<begin>>
			// LOOK INTO THIS FOR WHEN PARAMETERS ARE < but NOT EQUAL TO SIZE?
			// LOOK INTO THIS FOR WHEN PARAM TYPES DON'T MATCH INPUT
			expr_listLR1_1->leSigh = expr_list_1->leSigh;
			std::string procID = *expr_list_1->leSigh;
			Scope* calledScope = currScope->isProcCallable(procID);
			if (calledScope != NULL)
			{  // Called scope being out of scope (NULL) is handled in proc_stmt_1
				std::vector<Scope::VAR_WRAP> params = calledScope->getParams();
				int currInd = expr_list_1->get("ind");
				if (currInd < params.size())
				{
					expr_listLR1_1->set("ind", currInd + 1);
					expr_1->set("i", params[currInd].type);
				} // Ensuring that the number of parameters is correct is checked in expr_listLR1_1::EPSILON
				else
				{
					expr_listLR1_1->set("ind", currInd + 1);
					expr_1->set("i", TTI(ERROR));
				}
			}
		expr_1
			if (expr_1->get("t") == TTI(ERROR))
			{
				expr_listLR1_1->set("i", TTI(ERROR));
			}
			else
			{
				expr_listLR1_1->set("i", TTI(NONE));
			}
		<<end>>
			expr_list_1->set("t", expr_listLR1_1->get("t"));
expr_listLR1_1:
	<<vars>> t i ind
	<<begin>> ,_1 expr_1 expr_listLR1_2 <<end>> 
		<<begin>>
			expr_listLR1_2->leSigh = expr_listLR1_1->leSigh;
			std::string procID = *expr_listLR1_1->leSigh;
			if (expr_listLR1_1->get("i") == TTI(ERROR))
			{ // Even if we had the wrong type for previous arg, we still want to check the types of later parameters.
				expr_listLR1_2->set("i", TTI(ERROR));
			}

			Scope* calledScope = currScope->isProcCallable(procID);
			if (calledScope != NULL)
			{
				std::vector<Scope::VAR_WRAP> params = calledScope->getParams();
				int currInd = expr_listLR1_1->get("ind");
				if (currInd < params.size())
				{
					expr_listLR1_2->set("ind", currInd + 1);
					expr_1->set("i", params[currInd].type);
				} // Ensuring correct number of arguments is ensured inside of EPSILON
				else
				{
					expr_listLR1_2->set("ind", currInd + 1);
					expr_1->set("i", TTI(ERROR));
				}
			}
		expr_1
			if (expr_1->get("t") == TTI(ERROR))
			{
				expr_listLR1_2->set("i", TTI(ERROR));
			}
			else
			{
				expr_listLR1_2->set("i", TTI(NONE));
			}
		<<end>>
			expr_listLR1_1->set("t", expr_listLR1_2->get("t"));
	<<begin>> EPSILON <<end>> 
		<<end>>
			std::string& procID   = *expr_listLR1_1->leSigh;
			Scope* calledScope    = currScope->isProcCallable(procID);
			if (calledScope)
			{
				int numParamsExpected = calledScope->getParams().size();
				int numParamsFound = expr_listLR1_1->get("ind");
				if (numParamsExpected == numParamsFound)
				{
					expr_listLR1_1->set("t", expr_listLR1_1->get("i"));
				}
				else
				{
					expr_listLR1_1->set("t", TTI(ERROR));
					target << "SEMERR: Expecting " << std::to_string(numParamsExpected) << " parameters but receiving " << std::to_string(numParamsFound) << " parameters on line " << lookAhead.line << " for function " << procID << "\n";
				}
			}
expr_1:
	<<vars>> t i
	<<begin>> simple_expr_1 exprLF1_1 <<end>> 
		simple_expr_1
			exprLF1_1->set("i", simple_expr_1->get("t"));
		<<end>>
			int rec = exprLF1_1->get("t");
			int exp = expr_1->get("i");
			if ((exp == rec) == false && exp != TTI(IGNORE))
			{
				if ((exp == TTI(ERROR) || rec == TTI(ERROR)) == false)
				{
					target << "TYPERR: Expecting type " << Type::typeToString(ITT(exp)) << " but receiving " << Type::typeToString(ITT(rec))
					<< " on line " << lookAhead.line << " and near column " << lookAhead.charNum << "\n";
				}
				expr_1->set("t", TTI(ERROR));
			}
			else
			{
				expr_1->set("t", exprLF1_1->get("t"));
			}
exprLF1_1:
	<<vars>> t i
	<<begin>> relop_1 simple_expr_1 <<end>>
		simple_expr_1
			int t_1 = simple_expr_1->get("t");
			int t_2 = exprLF1_1->get("i");
			if (t_1 == t_2 && (t_2 == TTI(REAL) || t_2 == TTI(INT)))
			{
				exprLF1_1->set("t",TTI(BOOL));
			}
			else if (t_1 != TTI(ERROR) && t_2 != TTI(ERROR))
			{
				ParseNode* relop = exprLF1_1->findN("relop_1");
				Token* rel = relop->findT(0); // IF YOU WANT TO BE BROKEN THEN FINE I WILL DO STRANGE THINGS GOOD GRIEF
				target << "TYPERR: Expecting matching types of either both being INT or REAL but receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2))
				<< " respectively for relop " << rel->lex << " on line " << rel->line << " and column " << rel->charNum << "\n";
				exprLF1_1->set("t", TTI(ERROR));
			}
			else
			{
				exprLF1_1->set("t", TTI(ERROR));
			}
	<<begin>> EPSILON <<end>> 
		<<end>>
			exprLF1_1->set("t", exprLF1_1->get("i"));
term_1:
	<<vars>> t
	<<begin>> factor_1 termLR1_1 <<end>>
		factor_1
			termLR1_1->set("i", factor_1->get("t"));
		<<end>>
			term_1->set("t", termLR1_1->get("t"));
termLR1_1:
	<<vars>> t i
	<<begin>> EPSILON <<end>> 
		<<end>>
			termLR1_1->set("t", termLR1_1->get("i"));
	<<begin>> mulop_1 factor_1 termLR1_2 <<end>> 
		factor_1
			int t_1 = termLR1_1->get("i");
			int t_2 = factor_1->get("t");
			Token* mul = termLR1_1->findN("mulop_1")->findT(0);
			if (t_1 == t_2)
			{
				std::string op = mul->lex;
				if (op == "*" || op == "/" || op == "div" || op == "mod")
				{
					if (t_1 == TTI(INT) || t_1 == TTI(REAL))
					{
						termLR1_2->set("i", t_1);
					}
					else if(t_1 != TTI(ERROR))
					{
						target << "TYPERR: Expecting matching numeral types, but received " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2))
						<< " for mulop " << mul->lex << " on line " << mul->line << " and column " << mul->charNum << "\n";
						termLR1_2->set("i", TTI(ERROR));
					}
				}
				else if (op == "and")
				{
					if (t_1 == TTI(BOOL))
					{
						termLR1_2->set("i", TTI(BOOL));
					}
					else if (t_1 != TTI(ERROR))
					{
						target << "TYPERR: Expecting matching boolean types, but receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2))
						<< " respectively for mulop " << mul->lex << " on line " << mul->line << " and column " << mul->charNum << "\n";
						termLR1_2->set("i", TTI(ERROR));
					}
				}
			}
			else if (false == ( t_1 == TTI(ERROR) || t_2 == TTI(ERROR)))
			{
				target << "TYPERR: Expecting matching types, but receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2))
				<< " respectively for mulop " << mul->lex << " on line " << mul->line << " and column " << mul->charNum << "\n";
				termLR1_2->set("i", TTI(ERROR));
			}
		termLR1_2
			termLR1_1->set("t", termLR1_2->get("t"));

simple_expr_1:
	<<vars>> t
	<<begin>> sign_1 term_1 simple_exprLR1_1 <<end>>
		term_1
			simple_exprLR1_1->set("i", term_1->get("t"));
		<<end>>
			simple_expr_1->set("t", simple_exprLR1_1->get("t"));
	<<begin>> term_1 simple_exprLR1_1 <<end>>
		term_1
			simple_exprLR1_1->set("i", term_1->get("t"));
		<<end>>
			simple_expr_1->set("t", simple_exprLR1_1->get("t"));
simple_exprLR1_1:
	<<vars>> t i
	<<begin>> EPSILON <<end>>
		<<end>>
			simple_exprLR1_1->set("t", simple_exprLR1_1->get("i"));
	<<begin>> addop_1 term_1 simple_exprLR1_2 <<end>> 
		term_1
			Token* add = simple_exprLR1_1->findN("addop_1")->findT(0);
			int t_1 = simple_exprLR1_1->get("i");
			int t_2 = term_1->get("t");
			if (t_1 == t_2)
			{
				if ((t_2 == TTI(REAL) || t_2 == TTI(INT)) && add->lex != "or")
				{
					simple_exprLR1_2->set("i",t_2);
				}
				else if (t_2 == TTI(BOOL) && add->lex == "or")
				{
					simple_exprLR1_2->set("i",TTI(BOOL));
				}
				else if (t_1 != TTI(ERROR))
				{
					target << "TYPERR: invalid type arguments for " << add->lex << ".";
					if (add->lex == "or")
						target << " Expecting both booleans; receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2)) << " respectively";
					else
						target << " Expecting matching numeric types; receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2)) << " respectively";
					target << " on line " << lookAhead.line << "\n";
				}
			}
			else if (t_1 != TTI(ERROR) && t_2 != TTI(ERROR))
			{
			target << "TYPERR: Expecting matching types but receiving " << Type::typeToString(ITT(t_1)) << " and " << Type::typeToString(ITT(t_2))
				<< " respectively for operation " << add->lex << " on line " << add->line << " and column " << add->charNum << "\n";
				simple_exprLR1_2->set("i", TTI(ERROR));
			}
			else
			{
				simple_exprLR1_2->set("i", TTI(ERROR));
			}
	<<end>>
		simple_exprLR1_1->set("t", simple_exprLR1_2->get("t"));
factor_1:
	<<vars>> t
	<<begin>> id_1 factorLF1_1 <<end>> 
		id_1
			Token* tok = factor_1->findT("id_1");
			std::string lex = tok->lex;
			std::string* err = &std::string();
			Type::TYPE varType = currScope->getTypeOfVar(lex, err);
			if (*err == "")
			{
				factorLF1_1->set("i", varType);
			}
			else
			{
				target << "SEMERR: Attempting to use variable " << lex << " before it was initialized on line " << tok->line << " and collumn " << tok->charNum << "\n";
				factorLF1_1->set("i", TTI(ERROR));
			}
		<<end>>
			factor_1->set("t", factorLF1_1->get("t")); //# place holder
	<<begin>> num_1 <<end>>
		num_1
			Token* num = factor_1->findT("num_1");
			if (num->isInt())
				factor_1->set("t", TTI(INT));
			else if (num->isReal())
				factor_1->set("t", TTI(REAL));
			else
				factor_1->set("t", TTI(ERROR));
	<<begin>> (_1 expr_1 )_1 <<end>> 
		<<begin>>
			expr_1->set("i", TTI(IGNORE));
		<<end>>
			factor_1->set("t", expr_1->get("t"));
	<<begin>> not_1 factor_2 <<end>> 
		<<end>>
			if (factor_2->get("t") == TTI(BOOL))
			{
				factor_1->set("t", TTI(BOOL));
			}
			else if (factor_2->get("t") != TTI(ERROR))
			{
				target << "TYPERR: ~Expected BOOL but received " << Type::typeToString(ITT(factor_2->get("t"))) << " on line " << lookAhead.line << ".\n";
				factor_1->set("t", TTI(ERROR));
			}
			else
			{
				factor_1->set("t", TTI(ERROR));
			}
factorLF1_1:
	<<vars>> i t
	<<begin>> [_1 expr_1 ]_1 <<end>> 
		[_1
			expr_1->set("i",TTI(INT));
		<<end>>
			int t_i = factorLF1_1->get("i");
			if (false == (t_i == TTI(AINT) || t_i == TTI(AREAL) || t_i == TTI(ERROR)))
			{
				target << "TYPERR: Expected array, but received " << Type::typeToString(ITT(t_i)) << " on line " << lookAhead.line << ".\n";
				factorLF1_1->set("t", TTI(ERROR));
			}
			else
			{	
				if (expr_1->get("t") == TTI(INT))
				{
					int t_exp = 0;
					if (t_i == TTI(AINT)) t_exp = TTI(INT);
					if (t_i == TTI(AREAL)) t_exp = TTI(REAL);
					factorLF1_1->set("t", t_exp);
				}
				else
				{
					factorLF1_1->set("t", TTI(ERROR));
				}
			}
		<<begin>> EPSILON <<end>> 
		<<end>>
			int t_i = factorLF1_1->get("i");
			factorLF1_1->set("t", t_i);
sign_1:
	<<begin>> -_1 <<end>> 
	<<begin>> +_1 <<end>> 
addop_1:
	<<begin>> -_1 <<end>> 
	<<begin>> +_1 <<end>> 
	<<begin>> or_1 <<end>> 
assignop_1:
	<<begin>> :=_1 <<end>> 
mulop_1:
	<<begin>> and_1 <<end>> 
	<<begin>> mod_1 <<end>> 
	<<begin>> /_1 <<end>> 
	<<begin>> *_1 <<end>> 
	<<begin>> div_1 <<end>> 
relop_1:
	<<begin>> >_1 <<end>> 
	<<begin>> >=_1 <<end>> 
	<<begin>> <_1 <<end>> 
	<<begin>> <=_1 <<end>> 
	<<begin>> =_1 <<end>> 
	<<begin>> <>_1 <<end>> 
