addop
num ( id not $
args
; $
assignop
num + - ( id not $
comp_stmt
. ; end $ else
comp_stmtLF1
. ; end $ else
decs
begin procedure $
decsLR1
begin procedure $
expr
do ; ] ) end , then $ else
exprLF1
do ; ] ) end , then $ else
expr_list
$ )
expr_listLR1
$ )
factor
<= + or > , * then < - = div $ mod else do ; and ] ) end <> >= /
factorLF1
<= + or > , * then < - = div $ mod else do ; and ] ) end <> >= /
mulop
num ( id not $
opt_stmts
end $
param_list
$ )
param_listLR1
$ )
prgm
$
prgmLF1
$
prgmLF1LF1
$
proc_stmt
; end $ else
proc_stmtLF1
; end $ else
relop
num + - ( id not $
sign
num ( id not $
simple_expr
do ; ] <= ) > , end <> then < = >= $ else
simple_exprLR1
do ; ] <= ) > , end <> then < = >= $ else
std_type
; $ )
stmt
; end $ else
stmtLF1
; end $
stmt_list
end $
stmt_listLR1
end $
subprgm_dec
; $
subprgm_decLF1
; $
subprgm_decLF1LF1
; $
subprgm_decs
begin $
subprgm_decsLR1
begin $
subprgm_head
begin procedure var $
subprgm_headLF1
begin procedure var $
term
<= + or > , then < - = $ else do ; ] ) end <> >=
termLR1
<= + or > , then < - = $ else do ; ] ) end <> >=
type
; $ )
variable
$ :=
variableLF1
$ :=
